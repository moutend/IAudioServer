import "oaidl.idl";
import "ocidl.idl";

typedef struct RawVoiceProperty {
  INT32 Id;
  INT16 LanguageLength;
  INT16 DisplayNameLength;
  LPWSTR Language;
  LPWSTR DisplayName;
  double SpeakingRate;
  double Volume;
  double Pitch;
} RawVoiceProperty;

typedef struct RawCommand {
  INT16 Type;
  INT16 SFXIndex;
  LPWSTR TextToSpeech;
  double WaitDuration;
} RawCommand;

[
	object,
	dual,
	uuid(A25BD5CE-0DFD-4BD4-B85C-A77373261367)
]
interface IAudioServer : IDispatch {
	[id(1)] HRESULT Start();
	[id(2)] HRESULT Stop();
	[id(3)] HRESULT FadeIn();
	[id(4)] HRESULT FadeOut();
	[id(5)] HRESULT Push([in] RawCommand **pCommands, [in] INT32 commandsLength, [in] INT32 isForcePush);
	[id(6)] HRESULT GetVoiceCount([out] INT32 *pVoiceCount);
	[id(7)] HRESULT GetDefaultVoice([out] INT32 *pVoiceIndex);
	[id(8)] HRESULT GetVoiceProperty([in] INT32 voiceIndex, [out] RawVoiceProperty **pRawVoiceProperty);
	[id(9)] HRESULT SetDefaultVoice([in] INT32 voiceIndex);
	[id(10)] HRESULT SetVoiceProperty([in] INT32 voiceIndex, [in] RawVoiceProperty *pRawVoiceProperty);
}
[
	uuid(30C033DF-A924-406B-81CE-FAEF6DFEA5BD),
	version(1.0),
	helpstring("Type library for audio server")
]
library AudioServerLib {
	importlib("stdole2.tlb");
	[
		uuid(F9353078-F40A-4ED5-8354-039E805D2DF8)
	]
	coclass AudioServer
	{
		[default] interface IAudioServer;
	}
}
