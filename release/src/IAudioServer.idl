import "oaidl.idl";
import "ocidl.idl";

typedef INT64(__stdcall *NotifyIdleStateHandler)(INT64 id);

typedef struct RawVoiceProperty {
  LPWSTR Language;
  LPWSTR DisplayName;
  double SpeakingRate;
  double Volume;
  double Pitch;
} RawVoiceProperty;

typedef struct RawCommand {
  INT16 Type;
  INT16 SFXIndex;
  LPWSTR TextToSpeech;
  double WaitDuration;
} RawCommand;

[
	object,
	dual,
	uuid(B9C5DB57-2DD9-4F84-9BB7-A432D5D11F43)
]
interface IAudioServer : IDispatch {
	[id(1), local] HRESULT Start();
	[id(2), local] HRESULT Stop();
	[id(3), local] HRESULT FadeIn();
	[id(4), local] HRESULT FadeOut();
	[id(5), local] HRESULT Push([in] RawCommand **pCommands, [in] INT32 commandsLength, [in] INT32 isForcePush);
	[id(6), local] HRESULT GetVoiceCount([out] INT32 *pVoiceCount);
	[id(7), local] HRESULT GetDefaultVoice([out] INT32 *pVoiceIndex);
	[id(8), local] HRESULT GetVoiceProperty([in] INT32 voiceIndex, [out] RawVoiceProperty **ppVoiceProperty);
	[id(9), local] HRESULT SetDefaultVoice([in] INT32 voiceIndex);
	[id(10), local] HRESULT SetVoiceProperty([in] INT32 voiceIndex, [in] RawVoiceProperty *pVoiceProperty);
	[id(11), local] HRESULT SetNotifyIdleStateHandler([in] NotifyIdleStateHandler notifyIdleStateHandler);
}
[
	uuid(B0A46C35-2820-4ABD-950C-73BA1ABD62D0),
	version(1.0),
	helpstring("Type library for audio server")
]
library AudioServerLib {
	importlib("stdole2.tlb");
	[
		uuid(67A9FCE8-2CAB-461C-9284-4341DC5524D5)
	]
	coclass AudioServer
	{
		[default] interface IAudioServer;
	}
}
